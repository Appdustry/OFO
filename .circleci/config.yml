# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  node: circleci/node@1.1.6
  github: haskell-works/github-release@1.0.0
jobs:
  build-and-upload:
    executor:
      name: 'node/default'
    steps:
      # Setup environment
      - checkout
      - run: git submodule sync
      - run: git submodule update --init --recursive
      - run:
          name: Install Docker CLI
          command: |
            apt install apt-transport-https ca-certificates curl software-properties-common -y
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
            apt update
            apt-cache policy docker-ce
            apt install docker-ce
      - node/with-cache:
        - run:
            name: Install CLIs
            command: npm i -g @angular/cli @nestjs/cli
        - run:
            name: Build Frontend
            environment: 
              - NODE_ENV: production
            command: cd frontend && npm i && ng build --prod
        - run:
            name: Move frontend to backend
            command: |
              cd frontend
              cp ./dist/ofo-app/* ../backend/src/client/
        - run:
            name: Build backend
            environment: 
              - NODE_ENV: production
            command: |
              cd backend
              npm i
              npm run build
        - run:
            name: Build application Docker image
            command: |
              docker build -t ofo .
        - deploy:
            name: Push application Docker image
            command: |
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                echo "${DOCKER_PASSWORD}" | docker login --username ${DOCKER_USERNAME} --password-stdin
                docker tag ofo "datenlotse/ofo:${CIRCLE_SHA1}"
                docker tag ofo "datenlotse/ofo:latest"
                docker push "datenlotse/ofo"
              fi
workflows:
    build-and-upload:
      jobs:
        - build-and-upload
